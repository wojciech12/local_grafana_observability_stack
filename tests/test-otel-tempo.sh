#!/bin/bash

# Test Tempo integration via Alloy by sending sample trace data

echo "Testing Tempo integration..."

# Generate a trace ID and span ID for the test
TRACE_ID=$(openssl rand -hex 16)
SPAN_ID=$(openssl rand -hex 8)
CURRENT_TIME_NANO=$(date +%s)000000000

echo "Generated trace ID: $TRACE_ID"
echo "Generated span ID: $SPAN_ID"

# Test 1: Send trace data via Alloy (OTLP HTTP)
echo "1. Testing OTLP trace ingestion via Alloy..."
curl -X POST http://localhost:4318/v1/traces \
  -H "Content-Type: application/json" \
  -d '{
    "resourceSpans": [
      {
        "resource": {
          "attributes": [
            {
              "key": "service.name",
              "value": {
                "stringValue": "cli-test"
              }
            },
            {
              "key": "service.version",
              "value": {
                "stringValue": "1.0.0"
              }
            }
          ]
        },
        "scopeSpans": [
          {
            "scope": {
              "name": "test-tracer"
            },
            "spans": [
              {
                "traceId": "'$TRACE_ID'",
                "spanId": "'$SPAN_ID'",
                "name": "test-operation",
                "kind": "SPAN_KIND_INTERNAL",
                "startTimeUnixNano": "'$CURRENT_TIME_NANO'",
                "endTimeUnixNano": "'$((CURRENT_TIME_NANO + 1000000000))'",
                "attributes": [
                  {
                    "key": "test.type",
                    "value": {
                      "stringValue": "integration"
                    }
                  },
                  {
                    "key": "operation.name",
                    "value": {
                      "stringValue": "test-operation"
                    }
                  }
                ],
                "status": {
                  "code": "STATUS_CODE_OK"
                }
              }
            ]
          }
        ]
      }
    ]
  }'

echo -e "\n"

# Wait a moment for ingestion
echo "Waiting 3 seconds for trace ingestion..."
sleep 3

# Test 2: Query the specific trace from Tempo
echo "2. Querying trace from Tempo API..."
curl -s "http://localhost:3200/api/traces/$TRACE_ID" | jq '.'

echo -e "\n"

# Test 3: Search for traces by service name
echo "3. Searching for traces by service name..."
curl -s -G "http://localhost:3200/api/search" \
  --data-urlencode 'q=service.name=cli-test' \
  --data-urlencode 'limit=10' | jq '.'

echo -e "\n"

# Test 4: Get service map data (if available)
echo "4. Checking service map data..."
curl -s "http://localhost:3200/api/v2/search/tags" | jq '.'

echo -e "\n"

# Test 5: Query metrics generated by Tempo (if metrics generator is enabled)
echo "5. Checking generated metrics in Prometheus..."
curl -s "http://localhost:9090/api/v1/query?query=tempo_spanmetrics_calls_total" | jq '.data.result[] | select(.metric.service_name == "cli-test")'

echo -e "\n\nTest completed!"
echo "- Trace ID: $TRACE_ID"
echo "- Check Grafana at http://localhost:3000 to view traces"
echo "- Check Tempo directly at http://localhost:3200/api/traces/$TRACE_ID"